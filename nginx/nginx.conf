user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=web_limit:10m rate=30r/s;

    # Upstream servers
    upstream api_backend {
        server api:3000;
    }

    upstream web_backend {
        server web:3000;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name everapharm.com www.everapharm.com api.everapharm.com;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # API Server (api.everapharm.com)
    server {
        listen 443 ssl http2;
        server_name api.everapharm.com;

        # SSL configuration (update paths after Let's Encrypt setup)
        # ssl_certificate /etc/letsencrypt/live/api.everapharm.com/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/api.everapharm.com/privkey.pem;
        
        # For initial setup, use self-signed certificates
        ssl_certificate /etc/nginx/certs/self-signed.crt;
        ssl_certificate_key /etc/nginx/certs/self-signed.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location / {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }

    # Web Server (everapharm.com)
    server {
        listen 443 ssl http2;
        server_name everapharm.com www.everapharm.com;

        # SSL configuration (update paths after Let's Encrypt setup)
        # ssl_certificate /etc/letsencrypt/live/everapharm.com/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/everapharm.com/privkey.pem;
        
        # For initial setup, use self-signed certificates
        ssl_certificate /etc/nginx/certs/self-signed.crt;
        ssl_certificate_key /etc/nginx/certs/self-signed.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Next.js specific
        location /_next/static {
            proxy_cache_valid 60m;
            add_header Cache-Control "public, max-age=3600, immutable";
            proxy_pass http://web_backend;
        }

        location /static {
            proxy_cache_valid 60m;
            add_header Cache-Control "public, max-age=3600, immutable";
            proxy_pass http://web_backend;
        }

        location / {
            limit_req zone=web_limit burst=50 nodelay;
            
            proxy_pass http://web_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }
} 